Index: Unidad 1/semana 6/Aplicación de Conceptos de POO en Python2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Definimos la clase base \"Empleado\"\r\nclass Empleado:\r\n    \"\"\"\r\n    Clase base que representa a un empleado.\r\n    Demuestra encapsulación mediante atributos protegidos.\r\n    \"\"\"\r\n    def __init__(self, nombre, salario):\r\n        self._nombre = nombre  # Atributo protegido\r\n        self._salario = salario  # Atributo protegido\r\n\r\n    def mostrar_informacion(self):\r\n        \"\"\"Método para mostrar información del empleado.\"\"\"\r\n        print(f\"Nombre: {self._nombre}, Salario: {self._salario}\")\r\n\r\n    def calcular_bono(self):\r\n        \"\"\"Método base para calcular un bono.\"\"\"\r\n        return self._salario * 0.10\r\n\r\n\r\n# Definimos la clase derivada \"Gerente\"\r\nclass Gerente(Empleado):\r\n    \"\"\"\r\n    Clase derivada que representa a un gerente.\r\n    Extiende la funcionalidad de la clase base Empleado.\r\n    \"\"\"\r\n    def __init__(self, nombre, salario, departamento):\r\n        super().__init__(nombre, salario)  # Llamamos al constructor de la clase base\r\n        self.departamento = departamento  # Atributo adicional de la clase derivada\r\n\r\n    def mostrar_informacion(self):\r\n        \"\"\"Método sobrescrito para incluir el departamento.\"\"\"\r\n        super().mostrar_informacion()  # Llamamos al método de la clase base\r\n        print(f\"Departamento: {self.departamento}\")\r\n\r\n    def calcular_bono(self):\r\n        \"\"\"Sobrescribimos el método para calcular un bono mayor para los gerentes.\"\"\"\r\n        return self._salario * 0.20\r\n\r\n\r\n# Ejemplo de polimorfismo mediante una función externa\r\ndef mostrar_bono(empleado):\r\n    \"\"\"\r\n    Funciona con cualquier objeto que sea de la clase Empleado o sus derivadas,\r\n    demostrando polimorfismo.\r\n    \"\"\"\r\n    print(f\"El bono de {empleado._nombre} es: {empleado.calcular_bono()}\")\r\n\r\n\r\n# Bloque principal\r\nif __name__ == \"__main__\":\r\n    # Crear una instancia de la clase base\r\n    empleado1 = Empleado(\"Julio\", 600)\r\n    empleado1.mostrar_informacion()\r\n    mostrar_bono(empleado1)\r\n\r\n    print(\"-\" * 30)\r\n\r\n    # Crear una instancia de la clase derivada\r\n    gerente1 = Gerente(\"Rouse\", 400, \"Ventas\")\r\n    gerente1.mostrar_informacion()\r\n    mostrar_bono(gerente1)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Unidad 1/semana 6/Aplicación de Conceptos de POO en Python2.py b/Unidad 1/semana 6/Aplicación de Conceptos de POO en Python2.py
--- a/Unidad 1/semana 6/Aplicación de Conceptos de POO en Python2.py	(revision 7717e90463cbb33ac22d103c91b1d7b60dfcecc8)
+++ b/Unidad 1/semana 6/Aplicación de Conceptos de POO en Python2.py	(date 1737316156635)
@@ -56,6 +56,6 @@
     print("-" * 30)
 
     # Crear una instancia de la clase derivada
-    gerente1 = Gerente("Rouse", 400, "Ventas")
+    gerente1 = Gerente("Rouse", 480, "Ventas")
     gerente1.mostrar_informacion()
     mostrar_bono(gerente1)
